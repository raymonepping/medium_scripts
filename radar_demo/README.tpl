# {{REPO_NAME}}

![status](https://img.shields.io/badge/generated--by-radar__love.sh-brightgreen)
![demo](https://img.shields.io/badge/demo-vault--radar--ready-blue)
![Oasis](https://img.shields.io/badge/inspired--by-Oasis-yellow)

> “I think you’re the same as me, we see things they’ll never see...” — *Oasis*

---

## 🎯 Purpose

**A flexible, CLI-driven toolkit to simulate real-world code leaks—secrets, PII, and non-inclusive language—designed to test HashiCorp Vault Radar and other scanners.**

---

## ⚙️ How It Works

1. **Customize your builder input:**
   - `Vault_Radar_input.json`: Add/remove leaks, tweak values, assign languages, set scenario/severity.
   - Customize headers/footers via `header.tpl` and `footer.tpl`.

2. **Run `radar_love.sh`:**
   ```bash
   ./radar_love.sh --create true --build true --commit true --request true \
    --language python --scenario github

Available flags:
| Flag         | Description                                                            |
| ------------ | ---------------------------------------------------------------------- |
| `--create`   | Create/connect GitHub repo (default: true)                             |
| `--fresh`    | Reset the demo folder/repo if it already exists (default: false)       |
| `--build`    | Build the demo leak files and scripts (default: false)                 |
| `--commit`   | Commit the generated files via `commit_gh.sh` (default: false)         |
| `--request`  | Trigger PR scan after commit (default: false)                          |
| `--language` | Builder language (`bash`, `python`, `node`, `terraform`, `dockerfile`) |
| `--scenario` | Leak scenario (`AWS`, `PII`, etc.)                                     |
| `--debug`    | Print validated flag summary (use `--debug compact` for inline format) |
| `--quiet`    | Silent mode — skip banners, ideal for cron or automation               |
| `--status`   | Only validate flags and show current git status — exit immediately     |
| `--version`  | Print version number                                                   |
| `--help`     | Show usage help                                                        |

📦 Output Files

Vault_Radar_trigger.sh         → Bash leak demo
Vault_Radar_trigger.py         → Python leak demo
Vault_Radar_trigger.js         → Node.js leak demo
Vault_Radar_trigger.tf         → Terraform leak demo
Vault_Radar_trigger.Dockerfile → Dockerfile leak demo

Vault_Radar_input.json         → Source input
Vault_Radar_leaks_report.md    → Human-readable summary
Vault_Radar_cleanup.sh         → Cleanup utility
Vault_Radar_build.log          → Builder log
sanity_check_report.md         → Optional, only with --lint


🚦 Example Usage:

- All leaks (default):
    ../vault_radar_builder.sh --output-path . --scenario AWS

- Bash + Python, with lint:
    ../vault_radar_builder.sh --output-path . --languages bash,python --lint

- Dry-run Node + Terraform:
    ../vault_radar_builder.sh --output-path . --languages node,terraform --dry-run

🔧 Customization

🧠 Vault_Radar_input.json — Edit/add leaks
🖼️ templates/ — Custom header/footer banners
🎯 Scenario filters — Focus on AWS, PII, etc.
🎲 Random output size — Optional realism
📝 Notes

🛡️ Compatibility
Tested with:

✅ HashiCorp Vault Radar

“In my mind my dreams are real...” — Oasis

These scripts are for demo/educational use only.

Never commit real secrets or PII.

Works with: HashiCorp Vault Radar (https://www.hashicorp.com/en/products/vault/hcp-vault-radar)

📅 Auto-generated by radar_love.sh on {{DATE}}

© 2025 Raymon Epping — Open-source demo framework for secret scanning