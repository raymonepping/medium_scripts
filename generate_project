#!/usr/bin/env bash
set -euo pipefail

# üìå Usage
if [[ "${1:-}" != "--project" || -z "${2:-}" ]]; then
  echo "Usage: $0 --project <project-name> [--type <docker|node|python|terraform>]"
  exit 1
fi

# --- GitHub authentication check ---
if ! gh auth status 2>&1 | grep -q "Logged in to github.com"; then
  echo "‚ùå GitHub CLI is not authenticated."
  echo "üëâ Run: gh auth login"
  exit 1
fi

PROJECT_NAME="$2"
TYPE="${4:-}"  # Optional --type argument
SANITY_CHECK_CMD="sanity_check"
DEFAULT_GITIGNORE="/Users/raymon.epping/.gitignore_global"
DEFAULT_DOCKERIGNORE="$HOME/.dockerignore_global"
COMMIT_SCRIPT_NAME="commit_gh"
COMMIT_SCRIPT_FALLBACK="/Users/raymon.epping/.gitignore_global"


# üîß Prerequisites
for bin in git gh; do
  if ! command -v "$bin" &>/dev/null; then
    echo "‚ùå Required tool missing: $bin"
    exit 1
  fi
done

# üèóÔ∏è Create structure
mkdir -p "$PROJECT_NAME"
cd "$PROJECT_NAME"

# Add a placeholder for Terraform to ensure scan triggers
if [[ "$TYPE" == "terraform" ]]; then
  echo "üå± Creating minimal main.tf with required_version"
  cat > main.tf <<EOF
terraform {
  required_version = ">= 1.0.0"
}
EOF
fi

echo "üìÅ Created project: $PROJECT_NAME"

# üìÑ .gitignore (fallback logic)
if [[ -f "$DEFAULT_GITIGNORE" ]]; then
  cp "$DEFAULT_GITIGNORE" .gitignore
elif [[ -f "$COMMIT_SCRIPT_FALLBACK" ]]; then
  cp "$COMMIT_SCRIPT_FALLBACK" .gitignore
else
  echo "# Auto-generated .gitignore" > .gitignore
fi

# üìÑ .dockerignore (fallback logic)
if [[ -f "$DEFAULT_DOCKERIGNORE" ]]; then
  echo "üìÅ Using global .dockerignore from $DEFAULT_DOCKERIGNORE"
  cp "$DEFAULT_DOCKERIGNORE" .dockerignore
elif [[ -f "$COMMIT_SCRIPT_FALLBACK" ]]; then
  echo "üìÅ Using fallback .dockerignore from $COMMIT_SCRIPT_FALLBACK"
  cp "$COMMIT_SCRIPT_FALLBACK" .dockerignore
else
  echo "‚ö†Ô∏è  No default or fallback .dockerignore found. Creating minimal one."
  echo "# Auto-generated .dockerignore" > .dockerignore
fi



# ‚úÖ Validate resulting ignore files (quiet mode to avoid noise)
if command -v validate_ignore &>/dev/null; then
  echo ""
  echo "üîé Running post-generation validation on ignore files..."
  SANITY_MD="sanity_check.md" validate_ignore --quiet || true
  echo ""
else
  echo "‚ö†Ô∏è  'validate_ignore' command not found ‚Äî skipping validation"
  echo ""
fi

# üìÑ Init files with full license and README
curl -s https://www.gnu.org/licenses/gpl-3.0.txt > LICENSE

cat > README.md <<EOF
# $PROJECT_NAME

Automation scripts and utilities for shell-based workflows.

> This project was scaffolded automatically using \`generate_project.sh\`.

## License

[GPLv3](LICENSE)
EOF

touch .env

# üì¶ Dependabot config
mkdir -p .github

DEPENDABOT_FILE=".github/dependabot.yml"
mkdir -p .github

case "$TYPE" in
  terraform)
    cat > "$DEPENDABOT_FILE" <<EOF
version: 2
updates:
  - package-ecosystem: "terraform"
    directory: "/"
    schedule:
      interval: "weekly"
EOF
    ;;
  node)
    cat > "$DEPENDABOT_FILE" <<EOF
version: 2
updates:
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
    commit-message:
      prefix: "deps"
      include: "scope"
EOF
    ;;
  docker)
    cat > "$DEPENDABOT_FILE" <<EOF
version: 2
updates:
  - package-ecosystem: "docker"
    directory: "/"
    schedule:
      interval: "weekly"
    commit-message:
      prefix: "deps"
      include: "scope"
EOF
    ;;
  python)
    cat > "$DEPENDABOT_FILE" <<EOF
version: 2
updates:
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "weekly"
    commit-message:
      prefix: "deps"
      include: "scope"
EOF
    ;;
  *)
    echo "‚ö†Ô∏è Unknown project type '$TYPE'. Skipping dependabot config."
    ;;
esac

echo "üîê Added .github/dependabot.yml for Docker image CVE monitoring."

# üìÑ Type-specific scan_on_pr.yml workflow
if [[ -n "$TYPE" ]]; then
  SCAN_SOURCE_FILE="$HOME/.${TYPE}_scan_on_pr.yml"
  SCAN_TARGET_DIR=".github/workflows"
  SCAN_TARGET_FILE="${SCAN_TARGET_DIR}/scan_on_pr.yml"

  mkdir -p "$SCAN_TARGET_DIR"

  if [[ -f "$SCAN_SOURCE_FILE" ]]; then
    cp "$SCAN_SOURCE_FILE" "$SCAN_TARGET_FILE"
    echo "üìÑ Added $TYPE scan workflow to $SCAN_TARGET_FILE"
  else
    echo "‚ö†Ô∏è  Missing scan workflow: $SCAN_SOURCE_FILE ‚Äî skipping"
  fi
fi

# üìú Optional commit script
if command -v "$COMMIT_SCRIPT_NAME" &>/dev/null; then
  echo "‚úÖ Using global $COMMIT_SCRIPT_NAME"
elif [[ -f "$COMMIT_SCRIPT_NAME" ]]; then
  echo "‚úÖ Using local $COMMIT_SCRIPT_NAME"
elif [[ -f "$COMMIT_SCRIPT_FALLBACK" ]]; then
  cp "$COMMIT_SCRIPT_FALLBACK" ./
  echo "‚úÖ Copied fallback $COMMIT_SCRIPT_NAME"
else
  echo "‚ö†Ô∏è $COMMIT_SCRIPT_NAME not found"
fi

# üß™ Run sanity_check
if command -v "$SANITY_CHECK_CMD" &>/dev/null; then
  echo "üß™ Running sanity_check..."
  find . -type f \( -name "*.sh" -o -name "*.py" -o -name "*.js" -o -name "*.tf" -o -name "Dockerfile" \) \
    -exec "$SANITY_CHECK_CMD" --fix --report {} +
else
  echo "‚ö†Ô∏è $SANITY_CHECK_CMD not found ‚Äî skipping"
fi

# üåÄ Git + GitHub
git init

# ü™ù Git hook for sanity_check
HOOK_PATH=".git/hooks/pre-commit"
if command -v "$SANITY_CHECK_CMD" &>/dev/null; then
  echo "ü™ù Installing pre-commit git hook..."
  cat > "$HOOK_PATH" <<'EOF'
#!/bin/bash
set -euo pipefail

STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.sh$|\.py$|\.js$|\.tf$|Dockerfile$' || true)

if [[ -n "$STAGED_FILES" ]]; then
  echo "üîç Pre-commit: running sanity_check on staged files..."
  echo "$STAGED_FILES" | xargs sanity_check --fix --quiet
fi
EOF
  chmod +x "$HOOK_PATH"
else
  echo "‚ö†Ô∏è sanity_check not available, skipping git hook setup"
fi

git add .
git commit -m "Initial commit for $PROJECT_NAME"
gh repo create "$PROJECT_NAME" --public --source=. --remote=origin --push
git branch -M main
git push -u origin main

# üöÄ Optional: Trigger scan_on_pr workflow (if it exists)
if gh workflow list | grep -q "scan_on_pr"; then
  echo "üåÄ Triggering scan_on_pr GitHub Action workflow..."
  gh workflow run scan_on_pr.yml || echo "‚ö†Ô∏è Failed to trigger workflow"
else
  echo "‚ö†Ô∏è scan_on_pr.yml workflow not found in repo ‚Äî skipping workflow run"
fi

# üìå Optional: Trigger PR-based scan (if trigger_git_scan exists and --type is set)
if [[ -n "$TYPE" && -x "$(command -v trigger_git_scan)" ]]; then
  echo ""
  echo "üöÄ Initiating GitHub PR scan via trigger_git_scan..."
  trigger_git_scan || echo "‚ö†Ô∏è trigger_git_scan failed"
else
  echo "‚ÑπÔ∏è Skipping trigger_git_scan ‚Äî not enabled or missing."
fi

echo -e "\n‚úÖ Project '$PROJECT_NAME' scaffolded, sanity-checked, and pushed to GitHub!"

# üå≥ Generate folder tree markdown if folder_tree is available
if command -v folder_tree &>/dev/null; then
  echo ""
  echo "üå≥ Generating FOLDER_TREE.md for $PROJECT_NAME..."
  folder_tree --preset node,nuxt --output markdown "$PWD" || echo "‚ö†Ô∏è folder_tree failed"
else
  echo "‚ö†Ô∏è folder_tree not found ‚Äî skipping FOLDER_TREE.md generation"
fi
